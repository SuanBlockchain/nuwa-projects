generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  name     String?
  email    String    @unique
  role     Role      @default(GESTOR)
  password String
  id       String    @id @default(uuid()) @db.Uuid
  projects Project[]
}

model MathModels {
  id   String @id @default(uuid()) @db.Uuid
  name String @unique
}

model Species {
  id              String    @id @default(uuid()) @db.Uuid
  common_name     String    @unique
  scientific_name String    @unique
  family          String?
  functional_type String?
  values          Json
  comments        String?
  parcels         Parcels[]
}

model Keyword {
  id              String           @id @default(uuid()) @db.Uuid
  name            String           @unique
  projectKeywords ProjectKeyword[]
}

model Ecosystem {
  description String?
  values      Json
  type        String    @unique
  id          String    @id @default(uuid()) @db.Uuid
  parcels     Parcels[]
}

model Project {
  id          String           @id @default(uuid()) @db.Uuid
  title       String           @db.VarChar(255)
  country     String?          @db.VarChar(255)
  status      Status           @default(Seed)
  department  String?          @db.VarChar(255)
  values      Json?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  creatorId   String           @db.Uuid
  description String?
  name        String           @unique
  parcels     Parcels[]
  creator     User             @relation(fields: [creatorId], references: [id])
  keywords    ProjectKeyword[]
}

model ProjectKeyword {
  projectId String  @db.Uuid
  keywordId String  @db.Uuid
  keyword   Keyword @relation(fields: [keywordId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([projectId, keywordId])
}

model Parcels {
  id           String     @id @default(uuid()) @db.Uuid
  name         String     @unique
  projectId    String?    @db.Uuid
  ecosystemId  String?    @db.Uuid
  speciesId    String?    @db.Uuid
  area         Int
  municipality String?
  department   String?
  cadastral_id String?
  geolocation  Json?
  polygon      Json?
  ecosystem    Ecosystem? @relation(fields: [ecosystemId], references: [id])
  project      Project?   @relation(fields: [projectId], references: [id])
  species      Species?   @relation(fields: [speciesId], references: [id])
}
model TotalImpact {
  id           Int @unique
  total_impact Int

  @@map("total_impact")
}

enum Role {
  GESTOR
  ADMIN
}

enum Status {
  Seed
  InProgress
  Finished
  Canceled
}
