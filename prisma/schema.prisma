generator client {
  provider = "prisma-client-js"
}

// generator erd {
//   provider = "prisma-erd-generator"
//   output   = "erd.svg"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @default(uuid()) @db.Uuid
  name     String?
  email    String    @unique
  emailVerified DateTime?
  role     Role      @default(GESTOR)
  password String 

  accounts      Account[]
  sessions      Session[]
  projects Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}

model MathModels {
  id   String @id @default(uuid()) @db.Uuid
  name String @unique
}

model Species {
  id              String    @id @default(uuid()) @db.Uuid
  common_name     String    @unique
  scientific_name String    @unique
  family          String?
  functional_type String?
  values          Json
  comments        String?
  parcels         Parcels[]
}

model Keyword {
  id              String           @id @default(uuid()) @db.Uuid
  name            String           @unique
  projectKeywords ProjectKeyword[]
}

model Ecosystem {
  description String?
  values      Json
  type        String    @unique
  id          String    @id @default(uuid()) @db.Uuid
  parcels     Parcels[]
}

model Project {
  id          String           @id @default(uuid()) @db.Uuid
  title       String           @db.VarChar(255)
  country     String?          @db.VarChar(255)
  status      Status           @default(Seed)
  department  String?          @db.VarChar(255)
  values      Json?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  creatorId   String           @db.Uuid
  description String?
  name        String           @unique
  parcels     Parcels[]
  creator     User             @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  keywords    ProjectKeyword[]
}

model ProjectKeyword {
  projectId String  @db.Uuid
  keywordId String  @db.Uuid
  keyword   Keyword @relation(fields: [keywordId], references: [id], onDelete: Cascade)
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([projectId, keywordId])
}

model Parcels {
  id           String     @id @default(uuid()) @db.Uuid
  name         String     @unique
  projectId    String?    @db.Uuid
  ecosystemId  String?    @db.Uuid
  speciesId    String?    @db.Uuid
  area         Int
  municipality String?
  department   String?
  cadastral_id String?
  geolocation  Json?
  polygon      Json?
  area_factor  Int
  ecosystem    Ecosystem? @relation(fields: [ecosystemId], references: [id])
  project      Project?   @relation(fields: [projectId], references: [id])
  species      Species?   @relation(fields: [speciesId], references: [id])
}

enum Role {
  GESTOR
  ADMIN
}

enum Status {
  Seed
  InProgress
  Finished
  Canceled
}
